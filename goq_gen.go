// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package main

import (
	"fmt"

	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Address) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_8af7522bf9e9f63e_0 string
		zgensym_8af7522bf9e9f63e_0, err = dc.ReadString()
		(*z) = Address(zgensym_8af7522bf9e9f63e_0)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z Address) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteString(string(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Address) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendString(o, string(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Address) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Address) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_8af7522bf9e9f63e_1 string
		zgensym_8af7522bf9e9f63e_1, bts, err = nbs.ReadStringBytes(bts)

		if err != nil {
			return
		}
		(*z) = Address(zgensym_8af7522bf9e9f63e_1)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Address) Msgsize() (s int) {
	s = msgp.StringPrefixSize + len(string(z))
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Job) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields6zgensym_8af7522bf9e9f63e_7 = 35

	// -- templateDecodeMsg starts here--
	var totalEncodedFields6zgensym_8af7522bf9e9f63e_7 uint32
	totalEncodedFields6zgensym_8af7522bf9e9f63e_7, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft6zgensym_8af7522bf9e9f63e_7 := totalEncodedFields6zgensym_8af7522bf9e9f63e_7
	missingFieldsLeft6zgensym_8af7522bf9e9f63e_7 := maxFields6zgensym_8af7522bf9e9f63e_7 - totalEncodedFields6zgensym_8af7522bf9e9f63e_7

	var nextMiss6zgensym_8af7522bf9e9f63e_7 int32 = -1
	var found6zgensym_8af7522bf9e9f63e_7 [maxFields6zgensym_8af7522bf9e9f63e_7]bool
	var curField6zgensym_8af7522bf9e9f63e_7 string

doneWithStruct6zgensym_8af7522bf9e9f63e_7:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft6zgensym_8af7522bf9e9f63e_7 > 0 || missingFieldsLeft6zgensym_8af7522bf9e9f63e_7 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft6zgensym_8af7522bf9e9f63e_7, missingFieldsLeft6zgensym_8af7522bf9e9f63e_7, msgp.ShowFound(found6zgensym_8af7522bf9e9f63e_7[:]), decodeMsgFieldOrder6zgensym_8af7522bf9e9f63e_7)
		if encodedFieldsLeft6zgensym_8af7522bf9e9f63e_7 > 0 {
			encodedFieldsLeft6zgensym_8af7522bf9e9f63e_7--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField6zgensym_8af7522bf9e9f63e_7 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss6zgensym_8af7522bf9e9f63e_7 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss6zgensym_8af7522bf9e9f63e_7 = 0
			}
			for nextMiss6zgensym_8af7522bf9e9f63e_7 < maxFields6zgensym_8af7522bf9e9f63e_7 && (found6zgensym_8af7522bf9e9f63e_7[nextMiss6zgensym_8af7522bf9e9f63e_7] || decodeMsgFieldSkip6zgensym_8af7522bf9e9f63e_7[nextMiss6zgensym_8af7522bf9e9f63e_7]) {
				nextMiss6zgensym_8af7522bf9e9f63e_7++
			}
			if nextMiss6zgensym_8af7522bf9e9f63e_7 == maxFields6zgensym_8af7522bf9e9f63e_7 {
				// filled all the empty fields!
				break doneWithStruct6zgensym_8af7522bf9e9f63e_7
			}
			missingFieldsLeft6zgensym_8af7522bf9e9f63e_7--
			curField6zgensym_8af7522bf9e9f63e_7 = decodeMsgFieldOrder6zgensym_8af7522bf9e9f63e_7[nextMiss6zgensym_8af7522bf9e9f63e_7]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField6zgensym_8af7522bf9e9f63e_7)
		switch curField6zgensym_8af7522bf9e9f63e_7 {
		// -- templateDecodeMsg ends here --

		case "Id_zid00_i64":
			found6zgensym_8af7522bf9e9f63e_7[0] = true
			z.Id, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Msg_zid01_rct":
			found6zgensym_8af7522bf9e9f63e_7[1] = true
			{
				var zgensym_8af7522bf9e9f63e_8 int
				zgensym_8af7522bf9e9f63e_8, err = dc.ReadInt()
				z.Msg = JobMsg(zgensym_8af7522bf9e9f63e_8)
			}
			if err != nil {
				return
			}
		case "Aboutjid_zid02_i64":
			found6zgensym_8af7522bf9e9f63e_7[2] = true
			z.Aboutjid, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Cmd_zid03_str":
			found6zgensym_8af7522bf9e9f63e_7[3] = true
			z.Cmd, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Args_zid04_slc":
			found6zgensym_8af7522bf9e9f63e_7[4] = true
			var zgensym_8af7522bf9e9f63e_9 uint32
			zgensym_8af7522bf9e9f63e_9, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Args) >= int(zgensym_8af7522bf9e9f63e_9) {
				z.Args = (z.Args)[:zgensym_8af7522bf9e9f63e_9]
			} else {
				z.Args = make([]string, zgensym_8af7522bf9e9f63e_9)
			}
			for zgensym_8af7522bf9e9f63e_2 := range z.Args {
				z.Args[zgensym_8af7522bf9e9f63e_2], err = dc.ReadString()
				if err != nil {
					return
				}
			}
		case "Out_zid05_slc":
			found6zgensym_8af7522bf9e9f63e_7[5] = true
			var zgensym_8af7522bf9e9f63e_10 uint32
			zgensym_8af7522bf9e9f63e_10, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Out) >= int(zgensym_8af7522bf9e9f63e_10) {
				z.Out = (z.Out)[:zgensym_8af7522bf9e9f63e_10]
			} else {
				z.Out = make([]string, zgensym_8af7522bf9e9f63e_10)
			}
			for zgensym_8af7522bf9e9f63e_3 := range z.Out {
				z.Out[zgensym_8af7522bf9e9f63e_3], err = dc.ReadString()
				if err != nil {
					return
				}
			}
		case "Env_zid06_slc":
			found6zgensym_8af7522bf9e9f63e_7[6] = true
			var zgensym_8af7522bf9e9f63e_11 uint32
			zgensym_8af7522bf9e9f63e_11, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Env) >= int(zgensym_8af7522bf9e9f63e_11) {
				z.Env = (z.Env)[:zgensym_8af7522bf9e9f63e_11]
			} else {
				z.Env = make([]string, zgensym_8af7522bf9e9f63e_11)
			}
			for zgensym_8af7522bf9e9f63e_4 := range z.Env {
				z.Env[zgensym_8af7522bf9e9f63e_4], err = dc.ReadString()
				if err != nil {
					return
				}
			}
		case "Err_zid07_str":
			found6zgensym_8af7522bf9e9f63e_7[7] = true
			z.Err, err = dc.ReadString()
			if err != nil {
				return
			}
		case "HadError_zid08_boo":
			found6zgensym_8af7522bf9e9f63e_7[8] = true
			z.HadError, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "Host_zid09_str":
			found6zgensym_8af7522bf9e9f63e_7[9] = true
			z.Host, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Stm_zid10_i64":
			found6zgensym_8af7522bf9e9f63e_7[10] = true
			z.Stm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Etm_zid11_i64":
			found6zgensym_8af7522bf9e9f63e_7[11] = true
			z.Etm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Elapsec_zid12_i64":
			found6zgensym_8af7522bf9e9f63e_7[12] = true
			z.Elapsec, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Status_zid13_str":
			found6zgensym_8af7522bf9e9f63e_7[13] = true
			z.Status, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Subtime_zid14_i64":
			found6zgensym_8af7522bf9e9f63e_7[14] = true
			z.Subtime, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Pid_zid15_i64":
			found6zgensym_8af7522bf9e9f63e_7[15] = true
			z.Pid, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Dir_zid16_str":
			found6zgensym_8af7522bf9e9f63e_7[16] = true
			z.Dir, err = dc.ReadString()
			if err != nil {
				return
			}
		case "HomeOnSubmitter_zid17_str":
			found6zgensym_8af7522bf9e9f63e_7[17] = true
			z.HomeOnSubmitter, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Submitaddr_zid18_str":
			found6zgensym_8af7522bf9e9f63e_7[18] = true
			z.Submitaddr, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Serveraddr_zid19_str":
			found6zgensym_8af7522bf9e9f63e_7[19] = true
			z.Serveraddr, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Workeraddr_zid20_str":
			found6zgensym_8af7522bf9e9f63e_7[20] = true
			z.Workeraddr, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Finishaddr_zid21_slc":
			found6zgensym_8af7522bf9e9f63e_7[21] = true
			var zgensym_8af7522bf9e9f63e_12 uint32
			zgensym_8af7522bf9e9f63e_12, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Finishaddr) >= int(zgensym_8af7522bf9e9f63e_12) {
				z.Finishaddr = (z.Finishaddr)[:zgensym_8af7522bf9e9f63e_12]
			} else {
				z.Finishaddr = make([]string, zgensym_8af7522bf9e9f63e_12)
			}
			for zgensym_8af7522bf9e9f63e_5 := range z.Finishaddr {
				z.Finishaddr[zgensym_8af7522bf9e9f63e_5], err = dc.ReadString()
				if err != nil {
					return
				}
			}
		case "Signature_zid22_str":
			found6zgensym_8af7522bf9e9f63e_7[22] = true
			z.Signature, err = dc.ReadString()
			if err != nil {
				return
			}
		case "IsLocal_zid23_boo":
			found6zgensym_8af7522bf9e9f63e_7[23] = true
			z.IsLocal, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "Cancelled_zid24_boo":
			found6zgensym_8af7522bf9e9f63e_7[24] = true
			z.Cancelled, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "ArrayId_zid25_i64":
			found6zgensym_8af7522bf9e9f63e_7[25] = true
			z.ArrayId, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "GroupId_zid26_i64":
			found6zgensym_8af7522bf9e9f63e_7[26] = true
			z.GroupId, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Delegatetm_zid27_i64":
			found6zgensym_8af7522bf9e9f63e_7[27] = true
			z.Delegatetm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Lastpingtm_zid28_i64":
			found6zgensym_8af7522bf9e9f63e_7[28] = true
			z.Lastpingtm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Unansweredping_zid29_i64":
			found6zgensym_8af7522bf9e9f63e_7[29] = true
			z.Unansweredping, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Sendtime_zid30_i64":
			found6zgensym_8af7522bf9e9f63e_7[30] = true
			z.Sendtime, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Sendernonce_zid31_i64":
			found6zgensym_8af7522bf9e9f63e_7[31] = true
			z.Sendernonce, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Runinshell_zid32_boo":
			found6zgensym_8af7522bf9e9f63e_7[32] = true
			z.Runinshell, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "MaxShow_zid33_i64":
			found6zgensym_8af7522bf9e9f63e_7[33] = true
			z.MaxShow, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "CmdOpts_zid34_u64":
			found6zgensym_8af7522bf9e9f63e_7[34] = true
			z.CmdOpts, err = dc.ReadUint64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss6zgensym_8af7522bf9e9f63e_7 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Job
var decodeMsgFieldOrder6zgensym_8af7522bf9e9f63e_7 = []string{"Id_zid00_i64", "Msg_zid01_rct", "Aboutjid_zid02_i64", "Cmd_zid03_str", "Args_zid04_slc", "Out_zid05_slc", "Env_zid06_slc", "Err_zid07_str", "HadError_zid08_boo", "Host_zid09_str", "Stm_zid10_i64", "Etm_zid11_i64", "Elapsec_zid12_i64", "Status_zid13_str", "Subtime_zid14_i64", "Pid_zid15_i64", "Dir_zid16_str", "HomeOnSubmitter_zid17_str", "Submitaddr_zid18_str", "Serveraddr_zid19_str", "Workeraddr_zid20_str", "Finishaddr_zid21_slc", "Signature_zid22_str", "IsLocal_zid23_boo", "Cancelled_zid24_boo", "ArrayId_zid25_i64", "GroupId_zid26_i64", "Delegatetm_zid27_i64", "Lastpingtm_zid28_i64", "Unansweredping_zid29_i64", "Sendtime_zid30_i64", "Sendernonce_zid31_i64", "Runinshell_zid32_boo", "MaxShow_zid33_i64", "CmdOpts_zid34_u64"}

var decodeMsgFieldSkip6zgensym_8af7522bf9e9f63e_7 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *Job) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 35
	}
	var fieldsInUse uint32 = 35
	isempty[0] = (z.Id == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Msg == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.Aboutjid == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.Cmd) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.Args) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (len(z.Out) == 0) // string, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (len(z.Env) == 0) // string, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (len(z.Err) == 0) // string, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (!z.HadError) // bool, omitempty
	if isempty[8] {
		fieldsInUse--
	}
	isempty[9] = (len(z.Host) == 0) // string, omitempty
	if isempty[9] {
		fieldsInUse--
	}
	isempty[10] = (z.Stm == 0) // number, omitempty
	if isempty[10] {
		fieldsInUse--
	}
	isempty[11] = (z.Etm == 0) // number, omitempty
	if isempty[11] {
		fieldsInUse--
	}
	isempty[12] = (z.Elapsec == 0) // number, omitempty
	if isempty[12] {
		fieldsInUse--
	}
	isempty[13] = (len(z.Status) == 0) // string, omitempty
	if isempty[13] {
		fieldsInUse--
	}
	isempty[14] = (z.Subtime == 0) // number, omitempty
	if isempty[14] {
		fieldsInUse--
	}
	isempty[15] = (z.Pid == 0) // number, omitempty
	if isempty[15] {
		fieldsInUse--
	}
	isempty[16] = (len(z.Dir) == 0) // string, omitempty
	if isempty[16] {
		fieldsInUse--
	}
	isempty[17] = (len(z.HomeOnSubmitter) == 0) // string, omitempty
	if isempty[17] {
		fieldsInUse--
	}
	isempty[18] = (len(z.Submitaddr) == 0) // string, omitempty
	if isempty[18] {
		fieldsInUse--
	}
	isempty[19] = (len(z.Serveraddr) == 0) // string, omitempty
	if isempty[19] {
		fieldsInUse--
	}
	isempty[20] = (len(z.Workeraddr) == 0) // string, omitempty
	if isempty[20] {
		fieldsInUse--
	}
	isempty[21] = (len(z.Finishaddr) == 0) // string, omitempty
	if isempty[21] {
		fieldsInUse--
	}
	isempty[22] = (len(z.Signature) == 0) // string, omitempty
	if isempty[22] {
		fieldsInUse--
	}
	isempty[23] = (!z.IsLocal) // bool, omitempty
	if isempty[23] {
		fieldsInUse--
	}
	isempty[24] = (!z.Cancelled) // bool, omitempty
	if isempty[24] {
		fieldsInUse--
	}
	isempty[25] = (z.ArrayId == 0) // number, omitempty
	if isempty[25] {
		fieldsInUse--
	}
	isempty[26] = (z.GroupId == 0) // number, omitempty
	if isempty[26] {
		fieldsInUse--
	}
	isempty[27] = (z.Delegatetm == 0) // number, omitempty
	if isempty[27] {
		fieldsInUse--
	}
	isempty[28] = (z.Lastpingtm == 0) // number, omitempty
	if isempty[28] {
		fieldsInUse--
	}
	isempty[29] = (z.Unansweredping == 0) // number, omitempty
	if isempty[29] {
		fieldsInUse--
	}
	isempty[30] = (z.Sendtime == 0) // number, omitempty
	if isempty[30] {
		fieldsInUse--
	}
	isempty[31] = (z.Sendernonce == 0) // number, omitempty
	if isempty[31] {
		fieldsInUse--
	}
	isempty[32] = (!z.Runinshell) // bool, omitempty
	if isempty[32] {
		fieldsInUse--
	}
	isempty[33] = (z.MaxShow == 0) // number, omitempty
	if isempty[33] {
		fieldsInUse--
	}
	isempty[34] = (z.CmdOpts == 0) // number, omitempty
	if isempty[34] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Job) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8af7522bf9e9f63e_13 [35]bool
	fieldsInUse_zgensym_8af7522bf9e9f63e_14 := z.fieldsNotEmpty(empty_zgensym_8af7522bf9e9f63e_13[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8af7522bf9e9f63e_14 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Job'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x4a, 0x6f, 0x62})
	if err != nil {
		return err
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[0] {
		// write "Id_zid00_i64"
		err = en.Append(0xac, 0x49, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Id)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[1] {
		// write "Msg_zid01_rct"
		err = en.Append(0xad, 0x4d, 0x73, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(int(z.Msg))
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[2] {
		// write "Aboutjid_zid02_i64"
		err = en.Append(0xb2, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x6a, 0x69, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Aboutjid)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[3] {
		// write "Cmd_zid03_str"
		err = en.Append(0xad, 0x43, 0x6d, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Cmd)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[4] {
		// write "Args_zid04_slc"
		err = en.Append(0xae, 0x41, 0x72, 0x67, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Args)))
		if err != nil {
			return
		}
		for zgensym_8af7522bf9e9f63e_2 := range z.Args {
			err = en.WriteString(z.Args[zgensym_8af7522bf9e9f63e_2])
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[5] {
		// write "Out_zid05_slc"
		err = en.Append(0xad, 0x4f, 0x75, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Out)))
		if err != nil {
			return
		}
		for zgensym_8af7522bf9e9f63e_3 := range z.Out {
			err = en.WriteString(z.Out[zgensym_8af7522bf9e9f63e_3])
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[6] {
		// write "Env_zid06_slc"
		err = en.Append(0xad, 0x45, 0x6e, 0x76, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Env)))
		if err != nil {
			return
		}
		for zgensym_8af7522bf9e9f63e_4 := range z.Env {
			err = en.WriteString(z.Env[zgensym_8af7522bf9e9f63e_4])
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[7] {
		// write "Err_zid07_str"
		err = en.Append(0xad, 0x45, 0x72, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Err)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[8] {
		// write "HadError_zid08_boo"
		err = en.Append(0xb2, 0x48, 0x61, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.HadError)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[9] {
		// write "Host_zid09_str"
		err = en.Append(0xae, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Host)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[10] {
		// write "Stm_zid10_i64"
		err = en.Append(0xad, 0x53, 0x74, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Stm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[11] {
		// write "Etm_zid11_i64"
		err = en.Append(0xad, 0x45, 0x74, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Etm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[12] {
		// write "Elapsec_zid12_i64"
		err = en.Append(0xb1, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Elapsec)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[13] {
		// write "Status_zid13_str"
		err = en.Append(0xb0, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Status)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[14] {
		// write "Subtime_zid14_i64"
		err = en.Append(0xb1, 0x53, 0x75, 0x62, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Subtime)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[15] {
		// write "Pid_zid15_i64"
		err = en.Append(0xad, 0x50, 0x69, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Pid)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[16] {
		// write "Dir_zid16_str"
		err = en.Append(0xad, 0x44, 0x69, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x36, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Dir)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[17] {
		// write "HomeOnSubmitter_zid17_str"
		err = en.Append(0xb9, 0x48, 0x6f, 0x6d, 0x65, 0x4f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x37, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.HomeOnSubmitter)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[18] {
		// write "Submitaddr_zid18_str"
		err = en.Append(0xb4, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x38, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Submitaddr)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[19] {
		// write "Serveraddr_zid19_str"
		err = en.Append(0xb4, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x39, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Serveraddr)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[20] {
		// write "Workeraddr_zid20_str"
		err = en.Append(0xb4, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Workeraddr)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[21] {
		// write "Finishaddr_zid21_slc"
		err = en.Append(0xb4, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x31, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Finishaddr)))
		if err != nil {
			return
		}
		for zgensym_8af7522bf9e9f63e_5 := range z.Finishaddr {
			err = en.WriteString(z.Finishaddr[zgensym_8af7522bf9e9f63e_5])
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[22] {
		// write "Signature_zid22_str"
		err = en.Append(0xb3, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Signature)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[23] {
		// write "IsLocal_zid23_boo"
		err = en.Append(0xb1, 0x49, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x33, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.IsLocal)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[24] {
		// write "Cancelled_zid24_boo"
		err = en.Append(0xb3, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x34, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.Cancelled)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[25] {
		// write "ArrayId_zid25_i64"
		err = en.Append(0xb1, 0x41, 0x72, 0x72, 0x61, 0x79, 0x49, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x35, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.ArrayId)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[26] {
		// write "GroupId_zid26_i64"
		err = en.Append(0xb1, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x36, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.GroupId)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[27] {
		// write "Delegatetm_zid27_i64"
		err = en.Append(0xb4, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x74, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x37, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Delegatetm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[28] {
		// write "Lastpingtm_zid28_i64"
		err = en.Append(0xb4, 0x4c, 0x61, 0x73, 0x74, 0x70, 0x69, 0x6e, 0x67, 0x74, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x38, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Lastpingtm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[29] {
		// write "Unansweredping_zid29_i64"
		err = en.Append(0xb8, 0x55, 0x6e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x39, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Unansweredping)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[30] {
		// write "Sendtime_zid30_i64"
		err = en.Append(0xb2, 0x53, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x30, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Sendtime)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[31] {
		// write "Sendernonce_zid31_i64"
		err = en.Append(0xb5, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Sendernonce)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[32] {
		// write "Runinshell_zid32_boo"
		err = en.Append(0xb4, 0x52, 0x75, 0x6e, 0x69, 0x6e, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x32, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.Runinshell)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[33] {
		// write "MaxShow_zid33_i64"
		err = en.Append(0xb1, 0x4d, 0x61, 0x78, 0x53, 0x68, 0x6f, 0x77, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x33, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.MaxShow)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_13[34] {
		// write "CmdOpts_zid34_u64"
		err = en.Append(0xb1, 0x43, 0x6d, 0x64, 0x4f, 0x70, 0x74, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x34, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.CmdOpts)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Job) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [35]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Id_zid00_i64"
		o = append(o, 0xac, 0x49, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Id)
	}

	if !empty[1] {
		// string "Msg_zid01_rct"
		o = append(o, 0xad, 0x4d, 0x73, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x72, 0x63, 0x74)
		o = msgp.AppendInt(o, int(z.Msg))
	}

	if !empty[2] {
		// string "Aboutjid_zid02_i64"
		o = append(o, 0xb2, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x6a, 0x69, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Aboutjid)
	}

	if !empty[3] {
		// string "Cmd_zid03_str"
		o = append(o, 0xad, 0x43, 0x6d, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Cmd)
	}

	if !empty[4] {
		// string "Args_zid04_slc"
		o = append(o, 0xae, 0x41, 0x72, 0x67, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Args)))
		for zgensym_8af7522bf9e9f63e_2 := range z.Args {
			o = msgp.AppendString(o, z.Args[zgensym_8af7522bf9e9f63e_2])
		}
	}

	if !empty[5] {
		// string "Out_zid05_slc"
		o = append(o, 0xad, 0x4f, 0x75, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Out)))
		for zgensym_8af7522bf9e9f63e_3 := range z.Out {
			o = msgp.AppendString(o, z.Out[zgensym_8af7522bf9e9f63e_3])
		}
	}

	if !empty[6] {
		// string "Env_zid06_slc"
		o = append(o, 0xad, 0x45, 0x6e, 0x76, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Env)))
		for zgensym_8af7522bf9e9f63e_4 := range z.Env {
			o = msgp.AppendString(o, z.Env[zgensym_8af7522bf9e9f63e_4])
		}
	}

	if !empty[7] {
		// string "Err_zid07_str"
		o = append(o, 0xad, 0x45, 0x72, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Err)
	}

	if !empty[8] {
		// string "HadError_zid08_boo"
		o = append(o, 0xb2, 0x48, 0x61, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.HadError)
	}

	if !empty[9] {
		// string "Host_zid09_str"
		o = append(o, 0xae, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Host)
	}

	if !empty[10] {
		// string "Stm_zid10_i64"
		o = append(o, 0xad, 0x53, 0x74, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Stm)
	}

	if !empty[11] {
		// string "Etm_zid11_i64"
		o = append(o, 0xad, 0x45, 0x74, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Etm)
	}

	if !empty[12] {
		// string "Elapsec_zid12_i64"
		o = append(o, 0xb1, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Elapsec)
	}

	if !empty[13] {
		// string "Status_zid13_str"
		o = append(o, 0xb0, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Status)
	}

	if !empty[14] {
		// string "Subtime_zid14_i64"
		o = append(o, 0xb1, 0x53, 0x75, 0x62, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Subtime)
	}

	if !empty[15] {
		// string "Pid_zid15_i64"
		o = append(o, 0xad, 0x50, 0x69, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Pid)
	}

	if !empty[16] {
		// string "Dir_zid16_str"
		o = append(o, 0xad, 0x44, 0x69, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x36, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Dir)
	}

	if !empty[17] {
		// string "HomeOnSubmitter_zid17_str"
		o = append(o, 0xb9, 0x48, 0x6f, 0x6d, 0x65, 0x4f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x37, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.HomeOnSubmitter)
	}

	if !empty[18] {
		// string "Submitaddr_zid18_str"
		o = append(o, 0xb4, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x38, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Submitaddr)
	}

	if !empty[19] {
		// string "Serveraddr_zid19_str"
		o = append(o, 0xb4, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x39, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Serveraddr)
	}

	if !empty[20] {
		// string "Workeraddr_zid20_str"
		o = append(o, 0xb4, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Workeraddr)
	}

	if !empty[21] {
		// string "Finishaddr_zid21_slc"
		o = append(o, 0xb4, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x31, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Finishaddr)))
		for zgensym_8af7522bf9e9f63e_5 := range z.Finishaddr {
			o = msgp.AppendString(o, z.Finishaddr[zgensym_8af7522bf9e9f63e_5])
		}
	}

	if !empty[22] {
		// string "Signature_zid22_str"
		o = append(o, 0xb3, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Signature)
	}

	if !empty[23] {
		// string "IsLocal_zid23_boo"
		o = append(o, 0xb1, 0x49, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x33, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.IsLocal)
	}

	if !empty[24] {
		// string "Cancelled_zid24_boo"
		o = append(o, 0xb3, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x34, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.Cancelled)
	}

	if !empty[25] {
		// string "ArrayId_zid25_i64"
		o = append(o, 0xb1, 0x41, 0x72, 0x72, 0x61, 0x79, 0x49, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x35, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.ArrayId)
	}

	if !empty[26] {
		// string "GroupId_zid26_i64"
		o = append(o, 0xb1, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x36, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.GroupId)
	}

	if !empty[27] {
		// string "Delegatetm_zid27_i64"
		o = append(o, 0xb4, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x74, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x37, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Delegatetm)
	}

	if !empty[28] {
		// string "Lastpingtm_zid28_i64"
		o = append(o, 0xb4, 0x4c, 0x61, 0x73, 0x74, 0x70, 0x69, 0x6e, 0x67, 0x74, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x38, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Lastpingtm)
	}

	if !empty[29] {
		// string "Unansweredping_zid29_i64"
		o = append(o, 0xb8, 0x55, 0x6e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x39, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Unansweredping)
	}

	if !empty[30] {
		// string "Sendtime_zid30_i64"
		o = append(o, 0xb2, 0x53, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x30, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Sendtime)
	}

	if !empty[31] {
		// string "Sendernonce_zid31_i64"
		o = append(o, 0xb5, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Sendernonce)
	}

	if !empty[32] {
		// string "Runinshell_zid32_boo"
		o = append(o, 0xb4, 0x52, 0x75, 0x6e, 0x69, 0x6e, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x32, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.Runinshell)
	}

	if !empty[33] {
		// string "MaxShow_zid33_i64"
		o = append(o, 0xb1, 0x4d, 0x61, 0x78, 0x53, 0x68, 0x6f, 0x77, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x33, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.MaxShow)
	}

	if !empty[34] {
		// string "CmdOpts_zid34_u64"
		o = append(o, 0xb1, 0x43, 0x6d, 0x64, 0x4f, 0x70, 0x74, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x34, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.CmdOpts)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Job) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Job) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields15zgensym_8af7522bf9e9f63e_16 = 35

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields15zgensym_8af7522bf9e9f63e_16 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields15zgensym_8af7522bf9e9f63e_16, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft15zgensym_8af7522bf9e9f63e_16 := totalEncodedFields15zgensym_8af7522bf9e9f63e_16
	missingFieldsLeft15zgensym_8af7522bf9e9f63e_16 := maxFields15zgensym_8af7522bf9e9f63e_16 - totalEncodedFields15zgensym_8af7522bf9e9f63e_16

	var nextMiss15zgensym_8af7522bf9e9f63e_16 int32 = -1
	var found15zgensym_8af7522bf9e9f63e_16 [maxFields15zgensym_8af7522bf9e9f63e_16]bool
	var curField15zgensym_8af7522bf9e9f63e_16 string

doneWithStruct15zgensym_8af7522bf9e9f63e_16:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft15zgensym_8af7522bf9e9f63e_16 > 0 || missingFieldsLeft15zgensym_8af7522bf9e9f63e_16 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft15zgensym_8af7522bf9e9f63e_16, missingFieldsLeft15zgensym_8af7522bf9e9f63e_16, msgp.ShowFound(found15zgensym_8af7522bf9e9f63e_16[:]), unmarshalMsgFieldOrder15zgensym_8af7522bf9e9f63e_16)
		if encodedFieldsLeft15zgensym_8af7522bf9e9f63e_16 > 0 {
			encodedFieldsLeft15zgensym_8af7522bf9e9f63e_16--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField15zgensym_8af7522bf9e9f63e_16 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss15zgensym_8af7522bf9e9f63e_16 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss15zgensym_8af7522bf9e9f63e_16 = 0
			}
			for nextMiss15zgensym_8af7522bf9e9f63e_16 < maxFields15zgensym_8af7522bf9e9f63e_16 && (found15zgensym_8af7522bf9e9f63e_16[nextMiss15zgensym_8af7522bf9e9f63e_16] || unmarshalMsgFieldSkip15zgensym_8af7522bf9e9f63e_16[nextMiss15zgensym_8af7522bf9e9f63e_16]) {
				nextMiss15zgensym_8af7522bf9e9f63e_16++
			}
			if nextMiss15zgensym_8af7522bf9e9f63e_16 == maxFields15zgensym_8af7522bf9e9f63e_16 {
				// filled all the empty fields!
				break doneWithStruct15zgensym_8af7522bf9e9f63e_16
			}
			missingFieldsLeft15zgensym_8af7522bf9e9f63e_16--
			curField15zgensym_8af7522bf9e9f63e_16 = unmarshalMsgFieldOrder15zgensym_8af7522bf9e9f63e_16[nextMiss15zgensym_8af7522bf9e9f63e_16]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField15zgensym_8af7522bf9e9f63e_16)
		switch curField15zgensym_8af7522bf9e9f63e_16 {
		// -- templateUnmarshalMsg ends here --

		case "Id_zid00_i64":
			found15zgensym_8af7522bf9e9f63e_16[0] = true
			z.Id, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Msg_zid01_rct":
			found15zgensym_8af7522bf9e9f63e_16[1] = true
			{
				var zgensym_8af7522bf9e9f63e_17 int
				zgensym_8af7522bf9e9f63e_17, bts, err = nbs.ReadIntBytes(bts)

				if err != nil {
					return
				}
				z.Msg = JobMsg(zgensym_8af7522bf9e9f63e_17)
			}
		case "Aboutjid_zid02_i64":
			found15zgensym_8af7522bf9e9f63e_16[2] = true
			z.Aboutjid, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Cmd_zid03_str":
			found15zgensym_8af7522bf9e9f63e_16[3] = true
			z.Cmd, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Args_zid04_slc":
			found15zgensym_8af7522bf9e9f63e_16[4] = true
			if nbs.AlwaysNil {
				(z.Args) = (z.Args)[:0]
			} else {

				var zgensym_8af7522bf9e9f63e_18 uint32
				zgensym_8af7522bf9e9f63e_18, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Args) >= int(zgensym_8af7522bf9e9f63e_18) {
					z.Args = (z.Args)[:zgensym_8af7522bf9e9f63e_18]
				} else {
					z.Args = make([]string, zgensym_8af7522bf9e9f63e_18)
				}
				for zgensym_8af7522bf9e9f63e_2 := range z.Args {
					z.Args[zgensym_8af7522bf9e9f63e_2], bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
				}
			}
		case "Out_zid05_slc":
			found15zgensym_8af7522bf9e9f63e_16[5] = true
			if nbs.AlwaysNil {
				(z.Out) = (z.Out)[:0]
			} else {

				var zgensym_8af7522bf9e9f63e_19 uint32
				zgensym_8af7522bf9e9f63e_19, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Out) >= int(zgensym_8af7522bf9e9f63e_19) {
					z.Out = (z.Out)[:zgensym_8af7522bf9e9f63e_19]
				} else {
					z.Out = make([]string, zgensym_8af7522bf9e9f63e_19)
				}
				for zgensym_8af7522bf9e9f63e_3 := range z.Out {
					z.Out[zgensym_8af7522bf9e9f63e_3], bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
				}
			}
		case "Env_zid06_slc":
			found15zgensym_8af7522bf9e9f63e_16[6] = true
			if nbs.AlwaysNil {
				(z.Env) = (z.Env)[:0]
			} else {

				var zgensym_8af7522bf9e9f63e_20 uint32
				zgensym_8af7522bf9e9f63e_20, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Env) >= int(zgensym_8af7522bf9e9f63e_20) {
					z.Env = (z.Env)[:zgensym_8af7522bf9e9f63e_20]
				} else {
					z.Env = make([]string, zgensym_8af7522bf9e9f63e_20)
				}
				for zgensym_8af7522bf9e9f63e_4 := range z.Env {
					z.Env[zgensym_8af7522bf9e9f63e_4], bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
				}
			}
		case "Err_zid07_str":
			found15zgensym_8af7522bf9e9f63e_16[7] = true
			z.Err, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "HadError_zid08_boo":
			found15zgensym_8af7522bf9e9f63e_16[8] = true
			z.HadError, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "Host_zid09_str":
			found15zgensym_8af7522bf9e9f63e_16[9] = true
			z.Host, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Stm_zid10_i64":
			found15zgensym_8af7522bf9e9f63e_16[10] = true
			z.Stm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Etm_zid11_i64":
			found15zgensym_8af7522bf9e9f63e_16[11] = true
			z.Etm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Elapsec_zid12_i64":
			found15zgensym_8af7522bf9e9f63e_16[12] = true
			z.Elapsec, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Status_zid13_str":
			found15zgensym_8af7522bf9e9f63e_16[13] = true
			z.Status, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Subtime_zid14_i64":
			found15zgensym_8af7522bf9e9f63e_16[14] = true
			z.Subtime, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Pid_zid15_i64":
			found15zgensym_8af7522bf9e9f63e_16[15] = true
			z.Pid, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Dir_zid16_str":
			found15zgensym_8af7522bf9e9f63e_16[16] = true
			z.Dir, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "HomeOnSubmitter_zid17_str":
			found15zgensym_8af7522bf9e9f63e_16[17] = true
			z.HomeOnSubmitter, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Submitaddr_zid18_str":
			found15zgensym_8af7522bf9e9f63e_16[18] = true
			z.Submitaddr, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Serveraddr_zid19_str":
			found15zgensym_8af7522bf9e9f63e_16[19] = true
			z.Serveraddr, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Workeraddr_zid20_str":
			found15zgensym_8af7522bf9e9f63e_16[20] = true
			z.Workeraddr, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Finishaddr_zid21_slc":
			found15zgensym_8af7522bf9e9f63e_16[21] = true
			if nbs.AlwaysNil {
				(z.Finishaddr) = (z.Finishaddr)[:0]
			} else {

				var zgensym_8af7522bf9e9f63e_21 uint32
				zgensym_8af7522bf9e9f63e_21, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Finishaddr) >= int(zgensym_8af7522bf9e9f63e_21) {
					z.Finishaddr = (z.Finishaddr)[:zgensym_8af7522bf9e9f63e_21]
				} else {
					z.Finishaddr = make([]string, zgensym_8af7522bf9e9f63e_21)
				}
				for zgensym_8af7522bf9e9f63e_5 := range z.Finishaddr {
					z.Finishaddr[zgensym_8af7522bf9e9f63e_5], bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
				}
			}
		case "Signature_zid22_str":
			found15zgensym_8af7522bf9e9f63e_16[22] = true
			z.Signature, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "IsLocal_zid23_boo":
			found15zgensym_8af7522bf9e9f63e_16[23] = true
			z.IsLocal, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "Cancelled_zid24_boo":
			found15zgensym_8af7522bf9e9f63e_16[24] = true
			z.Cancelled, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "ArrayId_zid25_i64":
			found15zgensym_8af7522bf9e9f63e_16[25] = true
			z.ArrayId, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "GroupId_zid26_i64":
			found15zgensym_8af7522bf9e9f63e_16[26] = true
			z.GroupId, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Delegatetm_zid27_i64":
			found15zgensym_8af7522bf9e9f63e_16[27] = true
			z.Delegatetm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Lastpingtm_zid28_i64":
			found15zgensym_8af7522bf9e9f63e_16[28] = true
			z.Lastpingtm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Unansweredping_zid29_i64":
			found15zgensym_8af7522bf9e9f63e_16[29] = true
			z.Unansweredping, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Sendtime_zid30_i64":
			found15zgensym_8af7522bf9e9f63e_16[30] = true
			z.Sendtime, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Sendernonce_zid31_i64":
			found15zgensym_8af7522bf9e9f63e_16[31] = true
			z.Sendernonce, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Runinshell_zid32_boo":
			found15zgensym_8af7522bf9e9f63e_16[32] = true
			z.Runinshell, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "MaxShow_zid33_i64":
			found15zgensym_8af7522bf9e9f63e_16[33] = true
			z.MaxShow, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "CmdOpts_zid34_u64":
			found15zgensym_8af7522bf9e9f63e_16[34] = true
			z.CmdOpts, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss15zgensym_8af7522bf9e9f63e_16 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Job
var unmarshalMsgFieldOrder15zgensym_8af7522bf9e9f63e_16 = []string{"Id_zid00_i64", "Msg_zid01_rct", "Aboutjid_zid02_i64", "Cmd_zid03_str", "Args_zid04_slc", "Out_zid05_slc", "Env_zid06_slc", "Err_zid07_str", "HadError_zid08_boo", "Host_zid09_str", "Stm_zid10_i64", "Etm_zid11_i64", "Elapsec_zid12_i64", "Status_zid13_str", "Subtime_zid14_i64", "Pid_zid15_i64", "Dir_zid16_str", "HomeOnSubmitter_zid17_str", "Submitaddr_zid18_str", "Serveraddr_zid19_str", "Workeraddr_zid20_str", "Finishaddr_zid21_slc", "Signature_zid22_str", "IsLocal_zid23_boo", "Cancelled_zid24_boo", "ArrayId_zid25_i64", "GroupId_zid26_i64", "Delegatetm_zid27_i64", "Lastpingtm_zid28_i64", "Unansweredping_zid29_i64", "Sendtime_zid30_i64", "Sendernonce_zid31_i64", "Runinshell_zid32_boo", "MaxShow_zid33_i64", "CmdOpts_zid34_u64"}

var unmarshalMsgFieldSkip15zgensym_8af7522bf9e9f63e_16 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Job) Msgsize() (s int) {
	s = 3 + 13 + msgp.Int64Size + 14 + msgp.IntSize + 19 + msgp.Int64Size + 14 + msgp.StringPrefixSize + len(z.Cmd) + 15 + msgp.ArrayHeaderSize
	for zgensym_8af7522bf9e9f63e_2 := range z.Args {
		s += msgp.StringPrefixSize + len(z.Args[zgensym_8af7522bf9e9f63e_2])
	}
	s += 14 + msgp.ArrayHeaderSize
	for zgensym_8af7522bf9e9f63e_3 := range z.Out {
		s += msgp.StringPrefixSize + len(z.Out[zgensym_8af7522bf9e9f63e_3])
	}
	s += 14 + msgp.ArrayHeaderSize
	for zgensym_8af7522bf9e9f63e_4 := range z.Env {
		s += msgp.StringPrefixSize + len(z.Env[zgensym_8af7522bf9e9f63e_4])
	}
	s += 14 + msgp.StringPrefixSize + len(z.Err) + 19 + msgp.BoolSize + 15 + msgp.StringPrefixSize + len(z.Host) + 14 + msgp.Int64Size + 14 + msgp.Int64Size + 18 + msgp.Int64Size + 17 + msgp.StringPrefixSize + len(z.Status) + 18 + msgp.Int64Size + 14 + msgp.Int64Size + 14 + msgp.StringPrefixSize + len(z.Dir) + 26 + msgp.StringPrefixSize + len(z.HomeOnSubmitter) + 21 + msgp.StringPrefixSize + len(z.Submitaddr) + 21 + msgp.StringPrefixSize + len(z.Serveraddr) + 21 + msgp.StringPrefixSize + len(z.Workeraddr) + 21 + msgp.ArrayHeaderSize
	for zgensym_8af7522bf9e9f63e_5 := range z.Finishaddr {
		s += msgp.StringPrefixSize + len(z.Finishaddr[zgensym_8af7522bf9e9f63e_5])
	}
	s += 20 + msgp.StringPrefixSize + len(z.Signature) + 18 + msgp.BoolSize + 20 + msgp.BoolSize + 18 + msgp.Int64Size + 18 + msgp.Int64Size + 21 + msgp.Int64Size + 21 + msgp.Int64Size + 25 + msgp.Int64Size + 19 + msgp.Int64Size + 22 + msgp.Int64Size + 21 + msgp.BoolSize + 18 + msgp.Int64Size + 18 + msgp.Uint64Size
	return
}
func (z *Job) Gstring() (r string) {
	r = "&Job{\n"
	r += fmt.Sprintf("             Id: %v,\n", z.Id)
	r += fmt.Sprintf("            Msg: %v,\n", z.Msg)
	r += fmt.Sprintf("       Aboutjid: %v,\n", z.Aboutjid)
	r += fmt.Sprintf("            Cmd: \"%v\",\n", z.Cmd)
	r += fmt.Sprintf("           Args: %v,\n", z.Args)
	r += fmt.Sprintf("            Out: %v,\n", z.Out)
	r += fmt.Sprintf("            Env: %v,\n", z.Env)
	r += fmt.Sprintf("            Err: \"%v\",\n", z.Err)
	r += fmt.Sprintf("       HadError: %v,\n", z.HadError)
	r += fmt.Sprintf("           Host: \"%v\",\n", z.Host)
	r += fmt.Sprintf("            Stm: %v,\n", z.Stm)
	r += fmt.Sprintf("            Etm: %v,\n", z.Etm)
	r += fmt.Sprintf("        Elapsec: %v,\n", z.Elapsec)
	r += fmt.Sprintf("         Status: \"%v\",\n", z.Status)
	r += fmt.Sprintf("        Subtime: %v,\n", z.Subtime)
	r += fmt.Sprintf("            Pid: %v,\n", z.Pid)
	r += fmt.Sprintf("            Dir: \"%v\",\n", z.Dir)
	r += fmt.Sprintf("HomeOnSubmitter: \"%v\",\n", z.HomeOnSubmitter)
	r += fmt.Sprintf("     Submitaddr: \"%v\",\n", z.Submitaddr)
	r += fmt.Sprintf("     Serveraddr: \"%v\",\n", z.Serveraddr)
	r += fmt.Sprintf("     Workeraddr: \"%v\",\n", z.Workeraddr)
	r += fmt.Sprintf("     Finishaddr: %v,\n", z.Finishaddr)
	r += fmt.Sprintf("      Signature: \"%v\",\n", z.Signature)
	r += fmt.Sprintf("        IsLocal: %v,\n", z.IsLocal)
	r += fmt.Sprintf("      Cancelled: %v,\n", z.Cancelled)
	r += fmt.Sprintf("        ArrayId: %v,\n", z.ArrayId)
	r += fmt.Sprintf("        GroupId: %v,\n", z.GroupId)
	r += fmt.Sprintf("     Delegatetm: %v,\n", z.Delegatetm)
	r += fmt.Sprintf("     Lastpingtm: %v,\n", z.Lastpingtm)
	r += fmt.Sprintf(" Unansweredping: %v,\n", z.Unansweredping)
	r += fmt.Sprintf("       Sendtime: %v,\n", z.Sendtime)
	r += fmt.Sprintf("    Sendernonce: %v,\n", z.Sendernonce)
	r += fmt.Sprintf("     Runinshell: %v,\n", z.Runinshell)
	r += fmt.Sprintf("        MaxShow: %v,\n", z.MaxShow)
	r += fmt.Sprintf("        CmdOpts: %v,\n", z.CmdOpts)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *JobMsg) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_8af7522bf9e9f63e_22 int
		zgensym_8af7522bf9e9f63e_22, err = dc.ReadInt()
		(*z) = JobMsg(zgensym_8af7522bf9e9f63e_22)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z JobMsg) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteInt(int(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z JobMsg) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *JobMsg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *JobMsg) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_8af7522bf9e9f63e_23 int
		zgensym_8af7522bf9e9f63e_23, bts, err = nbs.ReadIntBytes(bts)

		if err != nil {
			return
		}
		(*z) = JobMsg(zgensym_8af7522bf9e9f63e_23)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z JobMsg) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *JobServ) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields28zgensym_8af7522bf9e9f63e_29 = 46

	// -- templateDecodeMsg starts here--
	var totalEncodedFields28zgensym_8af7522bf9e9f63e_29 uint32
	totalEncodedFields28zgensym_8af7522bf9e9f63e_29, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft28zgensym_8af7522bf9e9f63e_29 := totalEncodedFields28zgensym_8af7522bf9e9f63e_29
	missingFieldsLeft28zgensym_8af7522bf9e9f63e_29 := maxFields28zgensym_8af7522bf9e9f63e_29 - totalEncodedFields28zgensym_8af7522bf9e9f63e_29

	var nextMiss28zgensym_8af7522bf9e9f63e_29 int32 = -1
	var found28zgensym_8af7522bf9e9f63e_29 [maxFields28zgensym_8af7522bf9e9f63e_29]bool
	var curField28zgensym_8af7522bf9e9f63e_29 string

doneWithStruct28zgensym_8af7522bf9e9f63e_29:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft28zgensym_8af7522bf9e9f63e_29 > 0 || missingFieldsLeft28zgensym_8af7522bf9e9f63e_29 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft28zgensym_8af7522bf9e9f63e_29, missingFieldsLeft28zgensym_8af7522bf9e9f63e_29, msgp.ShowFound(found28zgensym_8af7522bf9e9f63e_29[:]), decodeMsgFieldOrder28zgensym_8af7522bf9e9f63e_29)
		if encodedFieldsLeft28zgensym_8af7522bf9e9f63e_29 > 0 {
			encodedFieldsLeft28zgensym_8af7522bf9e9f63e_29--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField28zgensym_8af7522bf9e9f63e_29 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss28zgensym_8af7522bf9e9f63e_29 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss28zgensym_8af7522bf9e9f63e_29 = 0
			}
			for nextMiss28zgensym_8af7522bf9e9f63e_29 < maxFields28zgensym_8af7522bf9e9f63e_29 && (found28zgensym_8af7522bf9e9f63e_29[nextMiss28zgensym_8af7522bf9e9f63e_29] || decodeMsgFieldSkip28zgensym_8af7522bf9e9f63e_29[nextMiss28zgensym_8af7522bf9e9f63e_29]) {
				nextMiss28zgensym_8af7522bf9e9f63e_29++
			}
			if nextMiss28zgensym_8af7522bf9e9f63e_29 == maxFields28zgensym_8af7522bf9e9f63e_29 {
				// filled all the empty fields!
				break doneWithStruct28zgensym_8af7522bf9e9f63e_29
			}
			missingFieldsLeft28zgensym_8af7522bf9e9f63e_29--
			curField28zgensym_8af7522bf9e9f63e_29 = decodeMsgFieldOrder28zgensym_8af7522bf9e9f63e_29[nextMiss28zgensym_8af7522bf9e9f63e_29]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField28zgensym_8af7522bf9e9f63e_29)
		switch curField28zgensym_8af7522bf9e9f63e_29 {
		// -- templateDecodeMsg ends here --

		case "NextJobId_zid00_i64":
			found28zgensym_8af7522bf9e9f63e_29[0] = true
			z.NextJobId, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "RunQ_zid01_map":
			found28zgensym_8af7522bf9e9f63e_29[1] = true
			var zgensym_8af7522bf9e9f63e_30 uint32
			zgensym_8af7522bf9e9f63e_30, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.RunQ == nil && zgensym_8af7522bf9e9f63e_30 > 0 {
				z.RunQ = make(map[int64]*Job, zgensym_8af7522bf9e9f63e_30)
			} else if len(z.RunQ) > 0 {
				for key, _ := range z.RunQ {
					delete(z.RunQ, key)
				}
			}
			for zgensym_8af7522bf9e9f63e_30 > 0 {
				zgensym_8af7522bf9e9f63e_30--
				var zgensym_8af7522bf9e9f63e_24 int64
				var zgensym_8af7522bf9e9f63e_25 *Job
				zgensym_8af7522bf9e9f63e_24, err = dc.ReadInt64()
				if err != nil {
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					if zgensym_8af7522bf9e9f63e_25 != nil {
						dc.PushAlwaysNil()
						err = zgensym_8af7522bf9e9f63e_25.DecodeMsg(dc)
						if err != nil {
							return
						}
						dc.PopAlwaysNil()
					}
				} else {
					// not Nil, we have something to read

					if zgensym_8af7522bf9e9f63e_25 == nil {
						zgensym_8af7522bf9e9f63e_25 = new(Job)
					}
					dc.DedupIndexEachPtr(zgensym_8af7522bf9e9f63e_25)

					err = zgensym_8af7522bf9e9f63e_25.DecodeMsg(dc)
					if err != nil {
						return
					}
				}
				z.RunQ[zgensym_8af7522bf9e9f63e_24] = zgensym_8af7522bf9e9f63e_25
			}
		case "WaitingJobs_zid02_slc":
			found28zgensym_8af7522bf9e9f63e_29[2] = true
			var zgensym_8af7522bf9e9f63e_31 uint32
			zgensym_8af7522bf9e9f63e_31, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.WaitingJobs) >= int(zgensym_8af7522bf9e9f63e_31) {
				z.WaitingJobs = (z.WaitingJobs)[:zgensym_8af7522bf9e9f63e_31]
			} else {
				z.WaitingJobs = make([]*Job, zgensym_8af7522bf9e9f63e_31)
			}
			for zgensym_8af7522bf9e9f63e_26 := range z.WaitingJobs {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					if z.WaitingJobs[zgensym_8af7522bf9e9f63e_26] != nil {
						dc.PushAlwaysNil()
						err = z.WaitingJobs[zgensym_8af7522bf9e9f63e_26].DecodeMsg(dc)
						if err != nil {
							return
						}
						dc.PopAlwaysNil()
					}
				} else {
					// not Nil, we have something to read

					if z.WaitingJobs[zgensym_8af7522bf9e9f63e_26] == nil {
						z.WaitingJobs[zgensym_8af7522bf9e9f63e_26] = new(Job)
					}
					dc.DedupIndexEachPtr(z.WaitingJobs[zgensym_8af7522bf9e9f63e_26])

					err = z.WaitingJobs[zgensym_8af7522bf9e9f63e_26].DecodeMsg(dc)
					if err != nil {
						return
					}
				}
			}
		case "FinishedJobsCount_zid03_i64":
			found28zgensym_8af7522bf9e9f63e_29[3] = true
			z.FinishedJobsCount, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "CancelledJobCount_zid04_i64":
			found28zgensym_8af7522bf9e9f63e_29[4] = true
			z.CancelledJobCount, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "FinishedRing_zid05_slc":
			found28zgensym_8af7522bf9e9f63e_29[5] = true
			var zgensym_8af7522bf9e9f63e_32 uint32
			zgensym_8af7522bf9e9f63e_32, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.FinishedRing) >= int(zgensym_8af7522bf9e9f63e_32) {
				z.FinishedRing = (z.FinishedRing)[:zgensym_8af7522bf9e9f63e_32]
			} else {
				z.FinishedRing = make([]*Job, zgensym_8af7522bf9e9f63e_32)
			}
			for zgensym_8af7522bf9e9f63e_27 := range z.FinishedRing {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					if z.FinishedRing[zgensym_8af7522bf9e9f63e_27] != nil {
						dc.PushAlwaysNil()
						err = z.FinishedRing[zgensym_8af7522bf9e9f63e_27].DecodeMsg(dc)
						if err != nil {
							return
						}
						dc.PopAlwaysNil()
					}
				} else {
					// not Nil, we have something to read

					if z.FinishedRing[zgensym_8af7522bf9e9f63e_27] == nil {
						z.FinishedRing[zgensym_8af7522bf9e9f63e_27] = new(Job)
					}
					dc.DedupIndexEachPtr(z.FinishedRing[zgensym_8af7522bf9e9f63e_27])

					err = z.FinishedRing[zgensym_8af7522bf9e9f63e_27].DecodeMsg(dc)
					if err != nil {
						return
					}
				}
			}
		case "FinishedRingMaxLen_zid06_int":
			found28zgensym_8af7522bf9e9f63e_29[6] = true
			z.FinishedRingMaxLen, err = dc.ReadInt()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss28zgensym_8af7522bf9e9f63e_29 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of JobServ
var decodeMsgFieldOrder28zgensym_8af7522bf9e9f63e_29 = []string{"NextJobId_zid00_i64", "RunQ_zid01_map", "WaitingJobs_zid02_slc", "FinishedJobsCount_zid03_i64", "CancelledJobCount_zid04_i64", "FinishedRing_zid05_slc", "FinishedRingMaxLen_zid06_int", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}

var decodeMsgFieldSkip28zgensym_8af7522bf9e9f63e_29 = []bool{false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true}

// fieldsNotEmpty supports omitempty tags
func (z *JobServ) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 7
	}
	var fieldsInUse uint32 = 7
	isempty[0] = (z.NextJobId == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.RunQ) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.WaitingJobs) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.FinishedJobsCount == 0) // number, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (z.CancelledJobCount == 0) // number, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (len(z.FinishedRing) == 0) // string, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (z.FinishedRingMaxLen == 0) // number, omitempty
	if isempty[6] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *JobServ) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8af7522bf9e9f63e_33 [46]bool
	fieldsInUse_zgensym_8af7522bf9e9f63e_34 := z.fieldsNotEmpty(empty_zgensym_8af7522bf9e9f63e_33[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8af7522bf9e9f63e_34 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'JobServ'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x4a, 0x6f, 0x62, 0x53, 0x65, 0x72, 0x76})
	if err != nil {
		return err
	}

	if !empty_zgensym_8af7522bf9e9f63e_33[0] {
		// write "NextJobId_zid00_i64"
		err = en.Append(0xb3, 0x4e, 0x65, 0x78, 0x74, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.NextJobId)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_33[1] {
		// write "RunQ_zid01_map"
		err = en.Append(0xae, 0x52, 0x75, 0x6e, 0x51, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x6d, 0x61, 0x70)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.RunQ)))
		if err != nil {
			return
		}
		for zgensym_8af7522bf9e9f63e_24, zgensym_8af7522bf9e9f63e_25 := range z.RunQ {
			err = en.WriteInt64(zgensym_8af7522bf9e9f63e_24)
			if err != nil {
				return
			}
			// gPtr.encodeGen():

			if zgensym_8af7522bf9e9f63e_25 == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = zgensym_8af7522bf9e9f63e_25.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_33[2] {
		// write "WaitingJobs_zid02_slc"
		err = en.Append(0xb5, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.WaitingJobs)))
		if err != nil {
			return
		}
		for zgensym_8af7522bf9e9f63e_26 := range z.WaitingJobs {
			// gPtr.encodeGen():

			if z.WaitingJobs[zgensym_8af7522bf9e9f63e_26] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = z.WaitingJobs[zgensym_8af7522bf9e9f63e_26].EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_33[3] {
		// write "FinishedJobsCount_zid03_i64"
		err = en.Append(0xbb, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.FinishedJobsCount)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_33[4] {
		// write "CancelledJobCount_zid04_i64"
		err = en.Append(0xbb, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.CancelledJobCount)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_33[5] {
		// write "FinishedRing_zid05_slc"
		err = en.Append(0xb6, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.FinishedRing)))
		if err != nil {
			return
		}
		for zgensym_8af7522bf9e9f63e_27 := range z.FinishedRing {
			// gPtr.encodeGen():

			if z.FinishedRing[zgensym_8af7522bf9e9f63e_27] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = z.FinishedRing[zgensym_8af7522bf9e9f63e_27].EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_8af7522bf9e9f63e_33[6] {
		// write "FinishedRingMaxLen_zid06_int"
		err = en.Append(0xbc, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.FinishedRingMaxLen)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *JobServ) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [46]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "NextJobId_zid00_i64"
		o = append(o, 0xb3, 0x4e, 0x65, 0x78, 0x74, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.NextJobId)
	}

	if !empty[1] {
		// string "RunQ_zid01_map"
		o = append(o, 0xae, 0x52, 0x75, 0x6e, 0x51, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x6d, 0x61, 0x70)
		o = msgp.AppendMapHeader(o, uint32(len(z.RunQ)))
		for zgensym_8af7522bf9e9f63e_24, zgensym_8af7522bf9e9f63e_25 := range z.RunQ {
			o = msgp.AppendInt64(o, zgensym_8af7522bf9e9f63e_24)
			// marshalGen.gPtr()

			if zgensym_8af7522bf9e9f63e_25 == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = zgensym_8af7522bf9e9f63e_25.MarshalMsg(o) // not is.iface
				if err != nil {
					return
				}
			}
		}
	}

	if !empty[2] {
		// string "WaitingJobs_zid02_slc"
		o = append(o, 0xb5, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.WaitingJobs)))
		for zgensym_8af7522bf9e9f63e_26 := range z.WaitingJobs {
			// marshalGen.gPtr()

			if z.WaitingJobs[zgensym_8af7522bf9e9f63e_26] == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = z.WaitingJobs[zgensym_8af7522bf9e9f63e_26].MarshalMsg(o) // not is.iface
				if err != nil {
					return
				}
			}
		}
	}

	if !empty[3] {
		// string "FinishedJobsCount_zid03_i64"
		o = append(o, 0xbb, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.FinishedJobsCount)
	}

	if !empty[4] {
		// string "CancelledJobCount_zid04_i64"
		o = append(o, 0xbb, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.CancelledJobCount)
	}

	if !empty[5] {
		// string "FinishedRing_zid05_slc"
		o = append(o, 0xb6, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.FinishedRing)))
		for zgensym_8af7522bf9e9f63e_27 := range z.FinishedRing {
			// marshalGen.gPtr()

			if z.FinishedRing[zgensym_8af7522bf9e9f63e_27] == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = z.FinishedRing[zgensym_8af7522bf9e9f63e_27].MarshalMsg(o) // not is.iface
				if err != nil {
					return
				}
			}
		}
	}

	if !empty[6] {
		// string "FinishedRingMaxLen_zid06_int"
		o = append(o, 0xbc, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.FinishedRingMaxLen)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *JobServ) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *JobServ) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields35zgensym_8af7522bf9e9f63e_36 = 46

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields35zgensym_8af7522bf9e9f63e_36 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields35zgensym_8af7522bf9e9f63e_36, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft35zgensym_8af7522bf9e9f63e_36 := totalEncodedFields35zgensym_8af7522bf9e9f63e_36
	missingFieldsLeft35zgensym_8af7522bf9e9f63e_36 := maxFields35zgensym_8af7522bf9e9f63e_36 - totalEncodedFields35zgensym_8af7522bf9e9f63e_36

	var nextMiss35zgensym_8af7522bf9e9f63e_36 int32 = -1
	var found35zgensym_8af7522bf9e9f63e_36 [maxFields35zgensym_8af7522bf9e9f63e_36]bool
	var curField35zgensym_8af7522bf9e9f63e_36 string

doneWithStruct35zgensym_8af7522bf9e9f63e_36:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft35zgensym_8af7522bf9e9f63e_36 > 0 || missingFieldsLeft35zgensym_8af7522bf9e9f63e_36 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft35zgensym_8af7522bf9e9f63e_36, missingFieldsLeft35zgensym_8af7522bf9e9f63e_36, msgp.ShowFound(found35zgensym_8af7522bf9e9f63e_36[:]), unmarshalMsgFieldOrder35zgensym_8af7522bf9e9f63e_36)
		if encodedFieldsLeft35zgensym_8af7522bf9e9f63e_36 > 0 {
			encodedFieldsLeft35zgensym_8af7522bf9e9f63e_36--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField35zgensym_8af7522bf9e9f63e_36 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss35zgensym_8af7522bf9e9f63e_36 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss35zgensym_8af7522bf9e9f63e_36 = 0
			}
			for nextMiss35zgensym_8af7522bf9e9f63e_36 < maxFields35zgensym_8af7522bf9e9f63e_36 && (found35zgensym_8af7522bf9e9f63e_36[nextMiss35zgensym_8af7522bf9e9f63e_36] || unmarshalMsgFieldSkip35zgensym_8af7522bf9e9f63e_36[nextMiss35zgensym_8af7522bf9e9f63e_36]) {
				nextMiss35zgensym_8af7522bf9e9f63e_36++
			}
			if nextMiss35zgensym_8af7522bf9e9f63e_36 == maxFields35zgensym_8af7522bf9e9f63e_36 {
				// filled all the empty fields!
				break doneWithStruct35zgensym_8af7522bf9e9f63e_36
			}
			missingFieldsLeft35zgensym_8af7522bf9e9f63e_36--
			curField35zgensym_8af7522bf9e9f63e_36 = unmarshalMsgFieldOrder35zgensym_8af7522bf9e9f63e_36[nextMiss35zgensym_8af7522bf9e9f63e_36]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField35zgensym_8af7522bf9e9f63e_36)
		switch curField35zgensym_8af7522bf9e9f63e_36 {
		// -- templateUnmarshalMsg ends here --

		case "NextJobId_zid00_i64":
			found35zgensym_8af7522bf9e9f63e_36[0] = true
			z.NextJobId, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "RunQ_zid01_map":
			found35zgensym_8af7522bf9e9f63e_36[1] = true
			if nbs.AlwaysNil {
				if len(z.RunQ) > 0 {
					for key, _ := range z.RunQ {
						delete(z.RunQ, key)
					}
				}

			} else {

				var zgensym_8af7522bf9e9f63e_37 uint32
				zgensym_8af7522bf9e9f63e_37, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.RunQ == nil && zgensym_8af7522bf9e9f63e_37 > 0 {
					z.RunQ = make(map[int64]*Job, zgensym_8af7522bf9e9f63e_37)
				} else if len(z.RunQ) > 0 {
					for key, _ := range z.RunQ {
						delete(z.RunQ, key)
					}
				}
				for zgensym_8af7522bf9e9f63e_37 > 0 {
					var zgensym_8af7522bf9e9f63e_24 int64
					var zgensym_8af7522bf9e9f63e_25 *Job
					zgensym_8af7522bf9e9f63e_37--
					zgensym_8af7522bf9e9f63e_24, bts, err = nbs.ReadInt64Bytes(bts)
					if err != nil {
						return
					}
					// unmarshalGen.gPtr(): we have a BaseElem.

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if zgensym_8af7522bf9e9f63e_25 != nil {
							zgensym_8af7522bf9e9f63e_25.UnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != zgensym_8af7522bf9e9f63e_25 {
								zgensym_8af7522bf9e9f63e_25.UnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if zgensym_8af7522bf9e9f63e_25 == nil {
								zgensym_8af7522bf9e9f63e_25 = new(Job)
							}

							bts, err = zgensym_8af7522bf9e9f63e_25.UnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
					z.RunQ[zgensym_8af7522bf9e9f63e_24] = zgensym_8af7522bf9e9f63e_25
				}
			}
		case "WaitingJobs_zid02_slc":
			found35zgensym_8af7522bf9e9f63e_36[2] = true
			if nbs.AlwaysNil {
				(z.WaitingJobs) = (z.WaitingJobs)[:0]
			} else {

				var zgensym_8af7522bf9e9f63e_38 uint32
				zgensym_8af7522bf9e9f63e_38, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.WaitingJobs) >= int(zgensym_8af7522bf9e9f63e_38) {
					z.WaitingJobs = (z.WaitingJobs)[:zgensym_8af7522bf9e9f63e_38]
				} else {
					z.WaitingJobs = make([]*Job, zgensym_8af7522bf9e9f63e_38)
				}
				for zgensym_8af7522bf9e9f63e_26 := range z.WaitingJobs {
					// unmarshalGen.gPtr(): we have a BaseElem.

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if z.WaitingJobs[zgensym_8af7522bf9e9f63e_26] != nil {
							z.WaitingJobs[zgensym_8af7522bf9e9f63e_26].UnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != z.WaitingJobs[zgensym_8af7522bf9e9f63e_26] {
								z.WaitingJobs[zgensym_8af7522bf9e9f63e_26].UnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if z.WaitingJobs[zgensym_8af7522bf9e9f63e_26] == nil {
								z.WaitingJobs[zgensym_8af7522bf9e9f63e_26] = new(Job)
							}

							bts, err = z.WaitingJobs[zgensym_8af7522bf9e9f63e_26].UnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "FinishedJobsCount_zid03_i64":
			found35zgensym_8af7522bf9e9f63e_36[3] = true
			z.FinishedJobsCount, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "CancelledJobCount_zid04_i64":
			found35zgensym_8af7522bf9e9f63e_36[4] = true
			z.CancelledJobCount, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "FinishedRing_zid05_slc":
			found35zgensym_8af7522bf9e9f63e_36[5] = true
			if nbs.AlwaysNil {
				(z.FinishedRing) = (z.FinishedRing)[:0]
			} else {

				var zgensym_8af7522bf9e9f63e_39 uint32
				zgensym_8af7522bf9e9f63e_39, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.FinishedRing) >= int(zgensym_8af7522bf9e9f63e_39) {
					z.FinishedRing = (z.FinishedRing)[:zgensym_8af7522bf9e9f63e_39]
				} else {
					z.FinishedRing = make([]*Job, zgensym_8af7522bf9e9f63e_39)
				}
				for zgensym_8af7522bf9e9f63e_27 := range z.FinishedRing {
					// unmarshalGen.gPtr(): we have a BaseElem.

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if z.FinishedRing[zgensym_8af7522bf9e9f63e_27] != nil {
							z.FinishedRing[zgensym_8af7522bf9e9f63e_27].UnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != z.FinishedRing[zgensym_8af7522bf9e9f63e_27] {
								z.FinishedRing[zgensym_8af7522bf9e9f63e_27].UnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if z.FinishedRing[zgensym_8af7522bf9e9f63e_27] == nil {
								z.FinishedRing[zgensym_8af7522bf9e9f63e_27] = new(Job)
							}

							bts, err = z.FinishedRing[zgensym_8af7522bf9e9f63e_27].UnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "FinishedRingMaxLen_zid06_int":
			found35zgensym_8af7522bf9e9f63e_36[6] = true
			z.FinishedRingMaxLen, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss35zgensym_8af7522bf9e9f63e_36 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of JobServ
var unmarshalMsgFieldOrder35zgensym_8af7522bf9e9f63e_36 = []string{"NextJobId_zid00_i64", "RunQ_zid01_map", "WaitingJobs_zid02_slc", "FinishedJobsCount_zid03_i64", "CancelledJobCount_zid04_i64", "FinishedRing_zid05_slc", "FinishedRingMaxLen_zid06_int", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}

var unmarshalMsgFieldSkip35zgensym_8af7522bf9e9f63e_36 = []bool{false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *JobServ) Msgsize() (s int) {
	s = 1 + 20 + msgp.Int64Size + 15 + msgp.MapHeaderSize
	if z.RunQ != nil {
		for zgensym_8af7522bf9e9f63e_24, zgensym_8af7522bf9e9f63e_25 := range z.RunQ {
			_ = zgensym_8af7522bf9e9f63e_25
			_ = zgensym_8af7522bf9e9f63e_24
			s += msgp.Int64Size
			if zgensym_8af7522bf9e9f63e_25 == nil {
				s += msgp.NilSize
			} else {
				s += zgensym_8af7522bf9e9f63e_25.Msgsize()
			}
		}
	}
	s += 22 + msgp.ArrayHeaderSize
	for zgensym_8af7522bf9e9f63e_26 := range z.WaitingJobs {
		if z.WaitingJobs[zgensym_8af7522bf9e9f63e_26] == nil {
			s += msgp.NilSize
		} else {
			s += z.WaitingJobs[zgensym_8af7522bf9e9f63e_26].Msgsize()
		}
	}
	s += 28 + msgp.Int64Size + 28 + msgp.Int64Size + 23 + msgp.ArrayHeaderSize
	for zgensym_8af7522bf9e9f63e_27 := range z.FinishedRing {
		if z.FinishedRing[zgensym_8af7522bf9e9f63e_27] == nil {
			s += msgp.NilSize
		} else {
			s += z.FinishedRing[zgensym_8af7522bf9e9f63e_27].Msgsize()
		}
	}
	s += 29 + msgp.IntSize
	return
}
func (z *JobServ) Gstring() (r string) {
	r = "&JobServ{\n"
	r += fmt.Sprintf("         NextJobId: %v,\n", z.NextJobId)
	r += fmt.Sprintf("              RunQ: %v,\n", z.RunQ)
	r += fmt.Sprintf("       WaitingJobs: %v,\n", z.WaitingJobs)
	r += fmt.Sprintf(" FinishedJobsCount: %v,\n", z.FinishedJobsCount)
	r += fmt.Sprintf(" CancelledJobCount: %v,\n", z.CancelledJobCount)
	r += fmt.Sprintf("      FinishedRing: %v,\n", z.FinishedRing)
	r += fmt.Sprintf("FinishedRingMaxLen: %v,\n", z.FinishedRingMaxLen)
	r += "}\n"
	return
}
